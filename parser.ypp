%{

/* Declarations section */
#include "hw3_output.hpp"

#define YYDEBUG 1 

extern int yylineno; 

extern int yylex(); 
int yyerror(const char * message);



%}

%token VOID
%token INT
%token BYTE
%token B
%token BOOL



%token TRUE
%token FALSE
%token RETURN
%token IF

%token WHILE
%token BREAK
%token CONTINUE
%token SC
%token COMMA
%token LPAREN

%token LBRACE
%token RBRACE

%token ID
%token NUM
%token STRING

%left OR
%left AND
%right ASSIGN
%left EQUALITY
%left RELOP
%left BINOP_ADD
%left BINOP_MUL
%left NOT
%left RPAREN
%nonassoc ELSE


%%
    Program: Funcs                                                              {output::printProductionRule(1);};
    Funcs: /*epsilon*/                                                          {output::printProductionRule(2);}; 
    Funcs: FuncDecl Funcs                                                       {output::printProductionRule(3);};
    FuncDecl: RetType ID LPAREN Formals RPAREN LBRACE Statements RBRACE         {output::printProductionRule(4);};
    RetType: Type                                                               {output::printProductionRule(5);};
    RetType:  VOID                                                              {output::printProductionRule(6);};
    Formals: /*epsilon*/                                                        {output::printProductionRule(7);};
    Formals: FormalsList                                                        {output::printProductionRule(8);};
    FormalsList: FormalDecl                                                     {output::printProductionRule(9);};
    FormalsList: FormalDecl COMMA FormalsList                                   {output::printProductionRule(10);};
    FormalDecl: Type ID                                                         {output::printProductionRule(11);};
    Statements: Statement                                                       {output::printProductionRule(12);};
    Statements: Statements Statement                                            {output::printProductionRule(13);};
    Statement: LBRACE Statements RBRACE                                         {output::printProductionRule(14);};
    Statement: Type ID SC                                                       {output::printProductionRule(15);};
    Statement: Type ID ASSIGN Exp SC                                            {output::printProductionRule(16);};
    Statement: ID ASSIGN Exp SC                                                 {output::printProductionRule(17);};
    Statement: Call SC                                                          {output::printProductionRule(18);};
    Statement: RETURN SC                                                        {output::printProductionRule(19);};
    Statement: RETURN Exp SC                                                    {output::printProductionRule(20);};
    Statement: IF LPAREN Exp RPAREN Statement                                   {output::printProductionRule(21);};
    Statement: IF LPAREN Exp RPAREN Statement ELSE Statement                    {output::printProductionRule(22);};
    Statement: WHILE LPAREN Exp RPAREN Statement                                {output::printProductionRule(23);};
    Statement: BREAK SC                                                         {output::printProductionRule(24);};
    Statement: CONTINUE SC                                                      {output::printProductionRule(25);};
    Call: ID LPAREN ExpList RPAREN                                              {output::printProductionRule(26);};
    Call: ID LPAREN RPAREN                                                      {output::printProductionRule(27);};
    ExpList: Exp                                                                {output::printProductionRule(28);};
    ExpList: Exp COMMA ExpList                                                  {output::printProductionRule(29);};
    Type: INT                                                                   {$$ = $1; output::printProductionRule(30);};
    Type: BYTE                                                                  {output::printProductionRule(31);};
    Type: BOOL                                                                  {output::printProductionRule(32);};
    Exp: LPAREN Exp RPAREN                                                      {output::printProductionRule(33);};
    Exp: Exp IF LPAREN Exp RPAREN ELSE Exp                                      {output::printProductionRule(34);};
    Exp: Exp BINOP_ADD Exp                                                      {output::printProductionRule(35);};
    Exp: Exp BINOP_MUL Exp                                                      {output::printProductionRule(35);};
    Exp: ID                                                                     {output::printProductionRule(36);};
    Exp: Call                                                                   {output::printProductionRule(37);};
    Exp: NUM                                                                    {output::printProductionRule(38);};
    Exp: NUM B                                                                  {output::printProductionRule(39);};
    Exp: STRING                                                                 {output::printProductionRule(40);};
    Exp: TRUE                                                                   {output::printProductionRule(41);};
    Exp: FALSE                                                                  {output::printProductionRule(42);};
    Exp: NOT Exp                                                                {output::printProductionRule(43);};
    Exp: Exp AND Exp                                                            {output::printProductionRule(44);};
    Exp: Exp OR Exp                                                             {output::printProductionRule(45);};
    Exp: Exp RELOP Exp                                                          {output::printProductionRule(46);};
    Exp: Exp EQUALITY Exp                                                       {output::printProductionRule(46);};
    Exp: LPAREN Type RPAREN Exp                                                 {output::printProductionRule(47);};
%%

int main(){
	yydebug = 0;
    
    
	int token;
	//cout << "max size = " << token_value.max_size() << endl;
	
	while ((token = yyparse())) {
		continue;
	      //printf("%d %s %s\n", yylineno, token, yytext);
		  //cout << yylineno << " " << tokentype_str[token] << " " << token_value.c_str() << endl;
		  //flush(cout);
	}
	
	return 0;
}

int yyerror(const char * message){
    output::errorSyn(yylineno);
    exit(0);
}


